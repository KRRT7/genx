# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags: 
      - "*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        C:\Miniconda\condabin\conda.bat env update --file genx\windows_build\conda_build.yml --name base
        C:\Miniconda\condabin\conda.bat init powershell
    - name: Build with pyinstaller
      run: |
        cd genx
        pyinstaller genx.spec
    - name: Pre-compile numba functions
      run: |
        genx\dist\genx\genx_console.exe --compile-nb
    - name: Download and Install Inno Setup installer
      run: |
        curl -L -o installer.exe http://files.jrsoftware.org/is/6/innosetup-6.1.2.exe
        ./installer.exe /verysilent /allusers /dir=inst
    - name: Build setup file
      run: |
        cd genx\windows_build
        python update_version.py
        iscc genx.iss
    - name: Archive distribution
      uses: actions/upload-artifact@v2
      with:
        name: windows-dist
        path: |
          genx\windows_build\Output\GenX-*_win64_setup.exe

  build-ubuntu-20:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install python3 python3-matplotlib python3-scipy alien rpm build-essential python3-setuptools python3-pip
        pip3 install orsopy
    - name: Build binary package
      run: |
        cd genx
        bash debian_build/make_deb.sh
    - name: Build PyPI package
      run: |
        cd genx
        pip3 install build
        cp setup_client.cfg setup.cfg
        python3 -m build
        cp setup_server.cfg setup.cfg
        python3 -m build
    - name: Move dist folder
      run: |
        mkdir dist
        mkdir dist_server
        mv genx/dist/genx3-*.whl dist/
        cp genx/dist/genx3-*.tar.gz dist/
        mv genx/dist/genx3server-*.whl dist_server/
        cp genx/dist/genx3server-*.tar.gz dist_server/
    - name: Rename distribution files
      run: |
        cd genx
        GENX_VERSION=$(python3 -c "from genx.version import __version__;print(__version__)")
        DEST_PATH=$(ls dist/*.deb | sed -e "s/genx/GenX-$GENX_VERSION/g")
        mv dist/*.deb $DEST_PATH
        mv dist/genx3-*.tar.gz "dist/GenX-$GENX_VERSION.tar.gz"
    - name: Upload to PyPI
      if: github.event_name != 'workflow_dispatch'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        skip_existing: true
    - name: Upload server package to PyPI
      if: github.event_name != 'workflow_dispatch'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN_SERVER }}
        packages_dir: dist_server/
        skip_existing: true
    - name: Archive distribution
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-20-dist
        path: |
          genx/dist/*.deb
          genx/dist/*.tar.gz

  build-macos:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Create environment
      run: |
        $CONDA/bin/conda env update --file genx/mac_build/conda_build.yml --name base
        python -m pip install bumps==0.9.0 orsopy==0.0.5 pyinstaller==5.0.1 pyinstaller-hooks-contrib==2022.4 pyyaml==6.0
    - name: Build with pyinstaller
      run: |
        cd genx
        pyinstaller genx_mac.spec
    - name: Fix library symbolic link issue # see pyinstaller bug #5710
      run: |
        cd genx/dist/genx.app/Contents/MacOS
        rm -f libwx_osx_cocoau_core-3.1.5.0.0.dylib libwx_baseu-3.1.5.0.0.dylib
        ln -s libwx_osx_cocoau_core-3.1.dylib libwx_osx_cocoau_core-3.1.5.0.0.dylib
        ln -s libwx_baseu-3.1.dylib libwx_baseu-3.1.5.0.0.dylib
        cd ../../..
        zip -9r genx.app.zip genx.app
    - name: Archive distribution
      uses: actions/upload-artifact@v2
      with:
        name: mac-dist
        path: |
          genx/dist/genx.app.zip

  release:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build-ubuntu-20, build-windows, build-macos]
    
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-20-dist
    - uses: actions/download-artifact@v2
      with:
        name: windows-dist
    - uses: actions/download-artifact@v2
      with:
        name: mac-dist
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "GenX*.deb,GenX*.tar.gz,GenX-*_win64_setup.exe,genx.app.zip"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true

  release-sourceforge:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build-ubuntu-20, build-windows]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-20-dist
    - uses: actions/download-artifact@v2
      with:
        name: windows-dist
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install python3 sshpass
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)
    - name: Upload files
      run: |
        cd genx
        GENX_MVERSION=$(python3 -c "from genx.version import __version__;print(__version__.rsplit('.',1)[0])")
        python3 create_subreadme.py
        cd ..
        DEST="GenX $GENX_MVERSION.x"
        mkdir "$DEST"
        mv genx/README_latest.txt "$DEST/README.txt"
        mv GenX*.deb GenX*.tar.gz GenX-*_win64_setup.exe "$DEST"
         rsync --progress -urz "$DEST" ${{secrets.SF_USER}}@frs.sourceforge.net:/home/pfs/project/genx/3.x.y/
